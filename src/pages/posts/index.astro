---
import type { CollectionEntry } from 'astro:content'
import Indicator from '@components/Indicator.astro'
import config from '@config'
import Layout from '@layouts/Layout.astro'
import { formatDate } from '@lib/utils'
import { getCollection } from 'astro:content'

const collection = await getCollection('posts')

function getDisplayDate(post: CollectionEntry<'posts'>): Date {
  return post.data.updatedDate || post.data.createdDate
}

function getSortDate(post: CollectionEntry<'posts'>): number {
  const date = post.data.updatedDate || post.data.createdDate
  return date.valueOf()
}

function isUpdated(post: CollectionEntry<'posts'>): boolean {
  return !!post.data.updatedDate
}

const posts = collection.sort((a, b) => getSortDate(b) - getSortDate(a))
---

<Layout title="Posts" description={config.description}>
  <ul class="flex flex-col gap-1.5">
    {
      posts.map((post) => {
        const displayDate = getDisplayDate(post)
        const updated = isUpdated(post)

        return (
          <li>
            <span class="group flex gap-3 justify-between items-start">
              <span>
                <a href={`/posts/${post.id}`} transition:name={`post-title-${post.id}`} class="group-hover:underline">{post.data.title}</a>
                {updated && post.data.updatedDate && (
                  <Indicator
                    title={`Published on ${formatDate(post.data.createdDate)}\nUpdated on ${formatDate(post.data.updatedDate)}`}
                    class="ml-1 translate-y-[0.25em] text-gray-500 text-nowrap dark:text-zinc-500"
                  >
                   Updated
                  </Indicator>
                )}
              </span>
              <span class="text-gray-500 text-nowrap dark:text-zinc-500 flex items-center gap-2">
                {formatDate(displayDate)}
              </span>
            </span>
          </li>
        )
      })
    }
  </ul>
</Layout>
