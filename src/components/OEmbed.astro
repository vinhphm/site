---
import config from '@/constants/config'

interface Props {
  url: string
  maxWidth?: number
}

const { url, maxWidth = 800 } = Astro.props
---

<script is:inline define:vars={{ workerHost: config.workerHost }}>
  window.__WORKER_HOST__ = workerHost
</script>

<script>
  interface OEmbedData {
    type: string
    url: string
    title?: string
    html?: string
    width?: number
    height?: number
  }

  function getCurrentTheme(): string {
    return document.documentElement.hasAttribute('data-theme') &&
           document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'
  }

  async function fetchOembedData(url: string, theme: string): Promise<OEmbedData | null> {
    try {
      const response = await fetch(
        `${(window as any).__WORKER_HOST__}/oembed?url=${encodeURIComponent(url)}&theme=${theme}`
      )
      return await response.json()
    } catch (error) {
      console.error('Failed to fetch oembed data:', error)
      return null
    }
  }

  function injectContent(container: HTMLElement, html: string, isDark: boolean) {
    container.innerHTML = ''
    const temp = document.createElement('div')
    temp.innerHTML = html

    // Add data-bluesky-embed-color-mode attribute to blockquote elements for Bluesky embeds
    const blockquotes = Array.from(temp.getElementsByTagName('blockquote'))
    blockquotes.forEach((blockquote) => {
      if (blockquote.classList.contains('bluesky-embed') ||
        (blockquote.getAttribute('data-bluesky-uri') && blockquote.getAttribute('data-bluesky-uri')?.includes('bsky'))) {
        blockquote.setAttribute('data-bluesky-embed-color-mode', isDark ? 'dark' : 'light')
      }
    })

    // Remove existing scripts to avoid duplicates
    const scripts = Array.from(temp.getElementsByTagName('script'))
    scripts.forEach((oldScript) => {
      oldScript.parentNode?.removeChild(oldScript)
    })

    container.innerHTML = temp.innerHTML

    // Re-inject scripts to make them executable
    scripts.forEach((oldScript) => {
      const newScript = document.createElement('script')
      Array.from(oldScript.attributes).forEach((attr) => {
        newScript.setAttribute(attr.name, attr.value)
      })
      newScript.innerHTML = oldScript.innerHTML
      container.appendChild(newScript)
    })
  }

  function renderOembedContent(container: HTMLElement, data: OEmbedData, maxWidth: number) {
    const contentDiv = container.querySelector('.oembed-content') as HTMLElement
    if (!contentDiv) return

    switch (data.type) {
      case 'rich':
        if (data.html) {
          const isDark = getCurrentTheme() === 'dark'
          injectContent(contentDiv, data.html, isDark)
        }
        break

      case 'photo':
        contentDiv.innerHTML = `
          <img src="${data.url}"
               alt="${data.title || ''}"
               ${data.width ? `width="${data.width}"` : ''}
               ${data.height ? `height="${data.height}"` : ''}
               style="max-width: ${maxWidth}px;">
        `
        break

      case 'video':
        contentDiv.innerHTML = `
          <div class="video-container" style="max-width: ${maxWidth}px;">
            ${data.html || ''}
          </div>
        `
        break

      case 'link':
        contentDiv.innerHTML = `
          <a href="${data.url}" target="_blank" rel="noopener noreferrer">
            ${data.title || data.url}
          </a>
        `
        break

      default:
        contentDiv.innerHTML = `
          <a href="${data.url}" target="_blank" rel="noopener noreferrer">
            ${data.title || data.url}
          </a>
        `
    }
  }

  async function loadOembedContent(container: HTMLElement) {
    const url = container.dataset.url
    const maxWidth = parseInt(container.dataset.maxWidth || '800')

    if (!url) return

    const loadingDiv = container.querySelector('.oembed-loading') as HTMLElement
    const contentDiv = container.querySelector('.oembed-content') as HTMLElement

    if (!loadingDiv || !contentDiv) return

    try {
      const theme = getCurrentTheme()
      const data = await fetchOembedData(url, theme)

      if (data) {
        loadingDiv.style.display = 'none'
        renderOembedContent(container, data, maxWidth)
      } else {
        loadingDiv.textContent = 'Failed to load embed'
      }
    } catch (error) {
      console.error('Error loading oembed content:', error)
      loadingDiv.textContent = 'Failed to load embed'
    }
  }

  function initOembedContainers() {
    const containers = document.querySelectorAll('.oembed-container')
    containers.forEach((container) => {
      loadOembedContent(container as HTMLElement)
    })
  }

  // Theme change observer
  function setupThemeObserver() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
          // Reload all oembed content when theme changes
          initOembedContainers()
        }
      })
    })

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    })

    // Store observer for cleanup if needed
    ;(window as any).__oembedThemeObserver = observer
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initOembedContainers()
      setupThemeObserver()
    })
  } else {
    initOembedContainers()
    setupThemeObserver()
  }

  // Re-initialize on Astro page navigation
  document.addEventListener('astro:page-load', () => {
    initOembedContainers()
    setupThemeObserver()
  })

  // Cleanup on page unload
  document.addEventListener('astro:before-swap', () => {
    const observer = (window as any).__oembedThemeObserver
    if (observer) {
      observer.disconnect()
      delete (window as any).__oembedThemeObserver
    }
  })
</script>

<div class="oembed-container" data-url={url} data-max-width={maxWidth}>
  <div class="oembed-loading">Loading embed...</div>
  <div class="oembed-content" style={`max-width: ${maxWidth}px;`}></div>
</div>

<style>
@reference "../styles/global.css";

.oembed-container {
  @apply my-4 w-full;
}

.oembed-loading {
  @apply p-4 text-center text-muted-foreground italic;
}

.oembed-content {
  @apply w-full flex justify-center-safe;
}

.oembed-content img {
  @apply max-w-full h-auto;
}

.video-container {
  @apply relative h-0 overflow-hidden pb-[56.25%];
}

.video-container iframe {
  @apply absolute top-0 left-0 w-full h-full;
}

.oembed-content a {
  @apply text-blue-500 underline dark:text-blue-400;
}

.oembed-content a:hover {
  @apply no-underline;
}
</style>
