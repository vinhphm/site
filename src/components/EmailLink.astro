---
import config from '@/constants/config'

export type Props = {
  text: string
  className?: string
}

const { text, className = '' } = Astro.props

// Enhanced obfuscation with Base64 encoding and simple cipher
const email = config.author.email
const emailParts = email.split('@')

if (emailParts.length !== 2 || !emailParts[0] || !emailParts[1]) {
  throw new Error('Invalid email format')
}

// Apply simple cipher (ROT13-like) then Base64 encode
const CIPHER_SHIFT = config.cipherShift
const cipher = (str: string) =>
  str
    .split('')
    .map((c) => String.fromCharCode(c.charCodeAt(0) + CIPHER_SHIFT))
    .join('')

const encodedUser = btoa(cipher(emailParts[0]))
const encodedDomain = btoa(cipher(emailParts[1]))
---

<!-- Enhanced email obfuscation with encoded data attributes -->
<span class={`email-obfuscated ${className}`}
      data-text={text}
      data-u={encodedUser}
      data-d={encodedDomain}>
  {text}
</span>


<script define:vars={{ CLIENT_CIPHER_SHIFT: CIPHER_SHIFT }}>
  // Enhanced client-side email deobfuscation
  function deobfuscateEmails() {
    const emailElements = document.querySelectorAll('.email-obfuscated')

    emailElements.forEach(element => {
      const text = element.getAttribute('data-text')
      const encodedUser = element.getAttribute('data-u')
      const encodedDomain = element.getAttribute('data-d')

      if (text === 'email' && encodedUser && encodedDomain) {
        // Reverse the obfuscation process (server-side value embedded)
        const decipher = (str) => str.split('').map(c =>
          String.fromCharCode(c.charCodeAt(0) - CLIENT_CIPHER_SHIFT)
        ).join('')

        // Decode Base64 then reverse cipher
        const user = decipher(atob(encodedUser))
        const domain = decipher(atob(encodedDomain))

        // Reconstruct email
        const email = user + '@' + domain

        // Create clickable mailto link
        const link = document.createElement('a')
        link.href = 'mailto:' + email
        link.textContent = text
        link.className = element.className.replace('email-obfuscated', '')
        link.title = `Send email to ${email}`

        // Replace the span with the link
        element.parentNode?.replaceChild(link, element)
      }
    })
  }

  // Run after DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', deobfuscateEmails)
  } else {
    deobfuscateEmails()
  }
</script>
