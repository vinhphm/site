---
import type { CollectionEntry } from 'astro:content'
import Indicator from '@/components/Indicator.astro'
import { formatDate } from '@/lib/date'
import { getDisplayDate, isUpdated } from '@/lib/writing'

type Props = {
  writing: CollectionEntry<'writings'>
}

const { writing } = Astro.props
const displayDate = getDisplayDate(writing)
const updated = isUpdated(writing)
---

<li>
  <span class="group/item flex gap-3 justify-between items-start">
    <span>
      <a
        href={`/writing/${writing.id}`}
        class="group-hover/item:underline"
        transition:name={`writing-id-${writing.id}`}
      >
        {writing.data.title}
      </a>
      {
        updated && writing.data.updated && (
          <Indicator class="indicator ml-1 translate-y-[0.25em] text-gray-500 text-nowrap dark:text-zinc-500">
            Updated
          </Indicator>
        )
      }
    </span>
    <span class="date text-gray-500 text-nowrap dark:text-zinc-500">
      {
        updated && writing.data.updated ? (
          <span class="relative overflow-hidden block">
            <span class="inline-block whitespace-nowrap transition-all duration-300 ease-in-out group-has-[.indicator:hover]/item:translate-y-full">
              {formatDate(writing.data.added)}
            </span>
            <span class="inline-block absolute left-0 top-0 transition-all duration-300 ease-in-out -translate-y-full group-has-[.indicator:hover]/item:translate-y-0">
              {formatDate(writing.data.updated)}
            </span>
          </span>
        ) : (
          formatDate(displayDate)
        )
      }
    </span>
  </span>
</li>
