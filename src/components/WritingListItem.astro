---
import type { CollectionEntry } from 'astro:content'
import Indicator from '@/components/Indicator.astro'
import { formatDate } from '@/lib/date'
import { getDisplayDate, isUpdated } from '@/lib/writing'

type Props = {
  writing: CollectionEntry<'writings'>
}

const { writing } = Astro.props
const displayDate = getDisplayDate(writing)
const updated = isUpdated(writing)
---

<li>
  <span class="group flex gap-3 justify-between items-start">
    <span class="group/indicator">
      <a
        href={`/writing/${writing.id}`}
        class="group-hover:underline"
        transition:name={`writing-id-${writing.id}`}
      >
        {writing.data.title}
      </a>
      {
        updated && writing.data.updated && (
          <Indicator class="ml-1 translate-y-[0.25em] text-gray-500 text-nowrap dark:text-zinc-500">
            Updated
          </Indicator>
        )
      }
    </span>
    <span class="date text-gray-500 text-nowrap dark:text-zinc-500">
      {
        updated && writing.data.updated ? (
          <span class="relative inline-block h-[1.2em] overflow-hidden">
            <span class="absolute inset-x-0 transition-transform duration-300 ease-in-out group-hover/indicator:translate-y-[-100%]">
              <span class="block h-[1.2em]">{formatDate(writing.data.added)}</span>
              <span class="block h-[1.2em]">{formatDate(writing.data.updated)}</span>
            </span>
          </span>
        ) : (
          formatDate(displayDate)
        )
      }
    </span>
  </span>
</li>
